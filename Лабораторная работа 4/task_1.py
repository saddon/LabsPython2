class Conifer:
    """ Базовый класс Хвойные деревья используется для характеристики дерева и методов его обработки. """
    def __init__(self, name: str, strength: int):
        """ Инициализация экземпляра класса.
        :param
            name (str): Название хвойного дерева
            strength (int): Предел прочности в МПа
        """
        self._name = name  # инициализируем защищенный атрибут
        self.strength = strength  # устанавливаем с помощью setter значение предела прочности

    @property
    def name(self) -> str:
        """
        Публичный метод, который внутри работает с защищенным атрибутом self._name
        Возвращает название хвойного дерева.
        """
        return self._name

    @property
    def strength(self) -> int:
        """
        Публичный метод, который внутри работает с защищенным атрибутом self._strength
        Возвращает предел прочности в МПа.
        """
        return self._strength

    @strength.setter
    def strength(self, value: int) -> None:
        """
        Устанавливает предел прочности хвойного дерева защищенному атрибуту self._strength
        :param
            value (int): Значение прочности
        :raises
            TypeError: если value не является числом типа int
            ValueError: если value не положительное
        """
        if not isinstance(value, int):
            raise TypeError("Прочность должна быть типа int")
        if not value > 0:
            raise ValueError("Прочность должна быть положительной")
        self._strength = value

    def __str__(self) -> str:
        """
        Метод используется для получения "читаемого" представления объекта
        Возвращает строку с информацией об атрибутах экземпляра класса
        """
        return f"Хвойное дерево {self.name}. Прочность {self.strength} МПа."

    def __repr__(self) -> str:
        """
        Метод предоставляет строковое представление объекта, которое может быть использовано для воссоздания объекта.
        Возвращает строку с именем класса и значениями его атрибутов.
        """
        return f"{self.__class__.__name__}(name={self.name!r}, strength={self.strength})"

    def stabilization(self) -> str:
        """
        Метод, используемый для обработки дерева.
        ...
        Возвращает строку с информацией об изменении при обработке дерева
        """
        return f"Прочность повышается больше, чем на {self.strength}"

    def antiseptic(self) -> str:
        """
        Метод, используемый для обработки дерева.
        ...
        Возвращает строку с информацией об обработке дерева
        """
        return f"Хвойное дерево пропитывается антисептиком,защищая от насекомых и плесени"


class Spruce(Conifer):
    """ Дочерний класс Ель, наследуемый от базового класса Хвойных деревьев. """
    def __init__(self, name: str, strength: int):
        """ Инициализация экземпляра дочернего класса.
        :param
            name (str): Название хвойного дерева
            strength (int): Предел прочности в МПа
        """
        super().__init__(name, strength)
        # вызываем конструктор базового класса, чтобы инициализировать атрибуты базового класса в дочернем

    def __str__(self) -> str:
        """
        Метод Базового класса Хвойные деревья перегружен, чтобы выводилась "Ель вида..."
        Возвращает строку с информацией об атрибутах экземпляра класса
        """
        return f"Ель вида {self.name}. Прочность {self.strength} МПа."

    def __repr__(self) -> str:
        """
        Метод наследуется от Базового класса Хвойные деревья.
        Возвращает строку с именем класса и значениями его атрибутов.
        """
        return f"{self.__class__.__name__}(name={self.name!r}, strength={self.strength})"

    def stabilization(self) -> str:
        """
        Метод наследуется от Базового класса Хвойные деревья
        ...
        Возвращает строку с информацией об изменении при обработке дерева
        """
        return f"Прочность повышается больше, чем на {self.strength}"

    def antiseptic(self) -> str:
        """
        Метод Базового класса Хвойные деревья перегружен, так как требуется усиленная обработка.
        ...
        Возвращает строку, выводимую при вызове метода базового класса, с дополненной информацией об обработке дерева
        """
        return f"{super().antiseptic()}. Так как Ель не имеет естественного запаса антисептиков, нужна доп. обработка"


if __name__ == "__main__":
    # Write your solution here
    print(Conifer("Ель обыкновенная", 450))
    print(Spruce("Ель обыкновенная", 450).stabilization())
    print(Spruce("Ель обыкновенная", 450).antiseptic())
    pass
